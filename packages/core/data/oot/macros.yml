#Generic Utility Macros
"is_child": "age(child)"
"is_adult": "age(adult)"
"is_day": "oot_time(day) || can_play_sun"
"is_night": "oot_time(night) || can_play_sun"
"is_dusk": "oot_time(day) && oot_time(night)" # If day and night can be true at the same time, then you have access to a local time-flow zone
#Standard Single Item Use Macros
"has_ocarina": "true"
"can_play(x)": "has(x)"
"has_sticks": "true"
"has_nuts": "true"
"can_use_sticks": "age_sticks && has_sticks"
"has_bomb_bag": "true"
"has_bombs": "true"
"has_bombchu": "true"
"can_use_slingshot": "is_child"
"has_bow": "true"
"has_arrows": "true"
"can_use_bow": "is_adult"
"has_hookshot(x)": "has(HOOKSHOT, x) || has(SHARED_HOOKSHOT, x)"
"can_hookshot_n(x)": "is_adult && has_hookshot(x)"
"can_hookshot": "is_adult"
"can_longshot": "can_hookshot_n(2)"
"can_boomerang": "age_boomerang && has(BOOMERANG)"
"can_hammer": "age_hammer && has(HAMMER)"
"has_bottle": "true"
"can_use_beans": "is_child && has(MAGIC_BEAN)"

# Songs
"can_play_sun": "can_play(SONG_SUN) || can_play(SHARED_SONG_SUN)"
"can_play_time": "can_play(SONG_TIME) || can_play(SHARED_SONG_TIME)"
"can_play_epona": "can_play(SONG_EPONA) || can_play(SHARED_SONG_EPONA)"
"can_play_storms": "can_play(SONG_STORMS) || can_play(SHARED_SONG_STORMS)"

# Age macros
"age_sticks": "is_child || setting(agelessSticks)"
"age_boomerang": "is_child || setting(agelessBoomerang)"
"age_hammer": "is_adult || setting(agelessHammer)"
"age_sword_child": "is_child || setting(agelessSwords)"
"age_sword_adult": "is_adult || setting(agelessSwords)"
"age_shield_child": "is_child || setting(agelessShields)"
"age_shield_adult": "is_adult || setting(agelessShields)"
"age_tunics": "is_adult || setting(agelessTunics)"
"age_boots": "is_adult || setting(agelessBoots)"

# Swords
"has_sword_kokiri": "cond(setting(progressiveSwordsOot, progressive), has(SWORD), has(SWORD_KOKIRI))"
"has_sword_master": "cond(setting(progressiveSwordsOot, progressive), has(SWORD, 2), has(SWORD_MASTER))"
"has_sword_goron": "cond(setting(progressiveSwordsOot, progressive), has(SWORD, 3), cond(setting(progressiveSwordsOot, goron), has(SWORD_GORON), has(SWORD_KNIFE) || has(SWORD_BIGGORON)))"
"has_weapon": "can_use_sword"
"can_use_sword": "(age_sword_child && has_sword_kokiri) || (is_adult)"

# Shields
"has_shield": "true"
"has_shield_for_scrubs": "(is_adult && renewable(SHIELD_HYLIAN)) || (age_shield_child && renewable(SHIELD_DEKU))"
"has_mirror_shield": "age_shield_adult && cond(setting(progressiveShieldsOot, progressive), has(SHIELD, 3), has(SHIELD_MIRROR))"

#Equipment Use Macros
"has_rupees": "event(RUPEES) || (setting(sharedWallets) && event(MM_RUPEES))"
"stone_of_agony": "has(STONE_OF_AGONY) || trick(OOT_HIDDEN_GROTTOS)"

"has_tunic_goron_strict": "age_tunics && has(TUNIC_GORON)"
"has_tunic_zora_strict": "age_tunics && has(TUNIC_ZORA)"
"has_tunic_goron": "has_tunic_goron_strict || trick(OOT_TUNICS)"
"has_tunic_zora": "has_tunic_zora_strict || trick(OOT_TUNICS)"

"has_iron_boots": "age_boots && has(BOOTS_IRON)"
"has_hover_boots": "age_boots && has(BOOTS_HOVER)"

"can_lift_silver": "is_adult && has(STRENGTH, 2)"
"can_lift_gold": "is_adult && has(STRENGTH, 3)"

#Magic Item Macros
"has_magic": "true"
"can_use_din": "has_magic && has(SPELL_FIRE)"
"can_use_nayru": "has_magic && has(SPELL_LOVE)"
"has_light_arrows": "can_use_bow && (has(ARROW_LIGHT) || has(SHARED_ARROW_LIGHT)) && has_magic"
"has_blue_fire_arrows": "can_use_bow && (setting(blueFireArrows) && (has(ARROW_ICE) || has(SHARED_ARROW_ICE))) && has_magic"
"has_blue_fire_arrows_mudwall": "trick(OOT_BFA_MUDWALLS) && has_blue_fire_arrows"
"has_fire_arrows": "can_use_bow && (has(ARROW_FIRE) || has(SHARED_ARROW_FIRE)) && has_magic"
"has_lens_strict": "has_magic && (has(LENS) || has(SHARED_LENS))"
#Item Combination Macros
"has_explosives": "true"
"has_bombflowers": "true"
"has_explosives_or_hammer": "true"
"can_hit_triggers_distance": "can_use_slingshot || can_use_bow"
"has_ranged_weapon_child": "can_use_slingshot || can_boomerang"
"has_ranged_weapon_adult": "can_use_bow || can_hookshot"
"has_ranged_weapon": "has_ranged_weapon_child || has_ranged_weapon_adult"
"can_collect_distance": "can_hookshot || can_boomerang"
"scarecrow_hookshot": "can_hookshot && event(SCARECROW)"
"scarecrow_longshot": "can_longshot && event(SCARECROW)"
"has_fire": "has_fire_arrows || can_use_din"
"has_fire_or_sticks": "can_use_sticks || has_fire"
"can_dive_small": "has(SCALE) || has_iron_boots"
"can_dive_big": "has(SCALE, 2) || has_iron_boots"
"hidden_grotto_bomb": "stone_of_agony && has_explosives_or_hammer"
"hidden_grotto_storms": "stone_of_agony && can_play_storms"
"has_spiritual_stones": "has(STONE_EMERALD) && has(STONE_RUBY) && has(STONE_SAPPHIRE)"

#Specific Interaction Macros:
"can_ride_epona": "is_adult && can_play_epona"
"gs_soil": "is_child && has_bottle && (renewable(BUGS) || event(BUGS))"
"adult_trade(x)": "is_adult && has(x)"
"has_blue_fire": "has_blue_fire_arrows || (has_bottle && (event(BLUE_FIRE) || renewable(BLUE_FIRE)))"
"can_ride_bean(x)": "is_adult && event(x)"
"can_damage": "true"
"can_damage_skull": "true"
"can_cut_grass": "true"
"can_kill_baba_sticks": "true"
"can_kill_baba_nuts": "true"
"can_hit_scrub": "true"
"has_small_key_gerudo": "setting(gerudoFortress, open) || cond(setting(gerudoFortress, single), has(SMALL_KEY_GF, 1), has(SMALL_KEY_GF, 4))"
"can_rescue_carpenter": "has_small_key_gerudo && (has_weapon || ((can_boomerang || has_nuts) && can_use_sticks))"
"carpenters_rescued": "setting(gerudoFortress, open) || (event(CARPENTER_1) && (setting(gerudoFortress, single) || (event(CARPENTER_2) || event(CARPENTER_3) || event(CARPENTER_4))))"

#Trick Macros
"gs_night": "is_night && (trick(OOT_NIGHT_GS) || can_play_sun)"
"has_lens": "has_lens_strict || trick(OOT_LENS)"
"trick_mido": "trick(OOT_MIDO_SKIP) && (has_bow || has_hookshot(1) || has(SHARED_ARROW_FIRE) || has(ARROW_FIRE) || has(SHARED_ARROW_LIGHT) || has(ARROW_LIGHT))"

#Specialty Macros
"met_zelda": "event(MEET_ZELDA) || setting(skipZelda)"
"woke_talon_child": "event(TALON_CHILD) || setting(skipZelda)"
"has_fire_spirit": "has_magic && ((has_arrows && (has(ARROW_FIRE) || has(SHARED_ARROW_FIRE)) && has_sticks) || has(SPELL_FIRE)) && (has_explosives || small_keys(SMALL_KEY_SPIRIT, 2))"
"has_ranged_weapon_both": "has_explosives || (((has(SLINGSHOT) && (event(SEEDS) || renewable(DEKU_SEEDS_30))) || has(BOOMERANG)) && (has_hookshot(1) || has_arrows))"
"can_collect_ageless": "has_hookshot(1) && has(BOOMERANG)"
"has_small_keys_fire(x)": "setting(smallKeyShuffleOot, removed) || cond(setting(smallKeyShuffleOot, anywhere), has(SMALL_KEY_FIRE, x + 1), has(SMALL_KEY_FIRE, x))"
"king_zora_moved": "event(KING_ZORA_LETTER) || setting(zoraKing, open) || (setting(zoraKing, adult) && is_adult)"
"can_move_mido": "is_child && has_sword_kokiri && renewable(SHIELD_DEKU)"
"mido_moved": "setting(dekuTree, open) || event(MIDO_MOVED)"

# Wallets
"has_wallet(n)": "cond(setting(childWallets), has(WALLET, n) || has(SHARED_WALLET, n), has(WALLET, n - 1) || has(SHARED_WALLET, n - 1))"
"can_use_wallet(n)": "has_rupees && has_wallet(n)"
"wallet_price(range, id)": "price(range, id, 0) || has_rupees && ((price(range, id, 99) && has_wallet(1)) || (price(range, id, 200) && has_wallet(2)) || (price(range, id, 500) && has_wallet(3)) || (price(range, id, 999) && has_wallet(4)))"
"shop_price(id)": "wallet_price(OOT_SHOPS, id)"

# Keys
"boss_key(x)": "setting(bossKeyShuffleOot, removed) || has(x)"
"small_keys(x, count)": "setting(smallKeyShuffleOot, removed) || has(x, count)"

# Masks
"has_mask_truth": "has(MASK_TRUTH) || has(SHARED_MASK_TRUTH)"
